defmodule A do
  # (0), 3, (6)


  # (0), 1, (4)


  # (0), 1, 2, (5)
  # (0),    2, (5)


  # (0), 1, 2, 3, (6)
  # (0), 1,    3, (6)
  # (0),    2, 3, (6)
  # (0),       3, (6)


  # (0), 1, 2, 3, 4, (7)
  # (0), 1, 2,    4, (7)
  # (0), 1,    3, 4, (7)
  # (0),    2, 3, 4, (7)

  # (0), 1,       4, (7)
  # (0),       3, 4, (7)

  # (0),    2,    4, (7)


  # (0), 1, 2, 4, (7)
  # (0), 1,    4, (7)
  # (0),    2, 4, (7)


  # (0), 1, 2, 5, (8)
  # (0),    2, 5, (8)


  # (0), 1, 2, 3, 4, 5, 6, 7, 8, (11)
  # (0), 1, 2, 3, 4, 5, 6,    8, (11)
  # (0), 1, 2, 3, 4, 5,    7, 8, (11)
  # (0), 1, 2, 3, 4,    6, 7, 8, (11)
  # (0), 1, 2, 3,    5, 6, 7, 8, (11)
  # (0), 1, 2,    4, 5, 6, 7, 8, (11)
  # (0), 1,    3, 4, 5, 6, 7, 8, (11)
  # (0),    2, 3, 4, 5, 6, 7, 8, (11)

  # 8 configurations
  # 2 2 2
  #      1  3  1  1  1   3   1   1   3   1   3  
  # (0), 1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 19, (22)
  # (0), 1, 4, 5, 6, 7, 10,     12, 15, 16, 19, (22)
  # (0), 1, 4, 5,    7, 10, 11, 12, 15, 16, 19, (22)
  # (0), 1, 4, 5,    7, 10,     12, 15, 16, 19, (22)
  # (0), 1, 4,    6, 7, 10, 11, 12, 15, 16, 19, (22)
  # (0), 1, 4,    6, 7, 10,     12, 15, 16, 19, (22)
  # (0), 1, 4,       7, 10, 11, 12, 15, 16, 19, (22)
  # (0), 1, 4,       7, 10,     12, 15, 16, 19, (22)


  # 19208 configurations
  # 2 2 2 7 7 7 7
  # 4x1       4x1       3x1       2x1       4x1       1x1       4x1
  #      1x3       2x3       1x3       2x3       1x3       2x3     
  #               4  1             4       2           3   1       2       2               4   1   1       2               4
  #      1  1  1  1  3  1  1   1   1   3   3   1   1   1   3   1   1   3   3   1   1   1   1   3   1   3   3   1   1   1   1
  # (0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 48, 49, (52)
  # (0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46, 47,     49, (52)
  # (0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46,     48, 49, (52)
  # (0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46,         49, (52)
  # (0), 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45,     47, 48, 49, (52)

  # (0),       3, 4, 7,       10, 11, 14, 17,         20, 23, 25, 28,     31,         34, 35, 38, 39, 42, 45, 46,     48, 49, (52)
  # (0),       3, 4, 7,       10, 11, 14, 17,         20, 23, 25, 28,     31,         34, 35, 38, 39, 42, 45, 46,         49, (52)
  # (0),       3, 4, 7,       10, 11, 14, 17,         20, 23, 25, 28,     31,         34, 35, 38, 39, 42, 45,     47, 48, 49, (52)
  # (0),       3, 4, 7,       10, 11, 14, 17,         20, 23, 25, 28,     31,         34, 35, 38, 39, 42, 45,     47,     49, (52)
  # (0),       3, 4, 7,       10, 11, 14, 17,         20, 23, 25, 28,     31,         34, 35, 38, 39, 42, 45,         48, 49, (52)

  def solve(filename) do
    File.stream!(filename)
    |> Stream.map(&String.trim/1)
    |> Stream.map(&String.to_integer/1)
    |> Enum.sort
    |> IO.inspect
    |> Enum.reduce({0, 0, []}, fn
      this, {prev, num_ones_this_run, rle} when this - prev == 1 -> {this, num_ones_this_run + 1, rle}
      this, {prev, num_ones_this_run, rle} when this - prev == 3 -> {this, 0, [num_ones_this_run | rle]}
    end)
    |> IO.inspect
    |> (fn {_, n, rle} -> Enum.reverse([n | rle]) end).()
    |> Enum.map(fn
      0 -> 1
      1 -> 1
      2 -> 2
      3 -> 4
      4 -> 7
    end)
    |> Enum.reduce(&Kernel.*/2)
  end

  def test1_10b do
    IO.puts "expect 8"
    solve("test1.txt")
  end

  def test2_10b do
    IO.puts "expect 19208"
    solve("test2.txt")
  end

  def solve10b do
    solve("input.txt")
  end
end

